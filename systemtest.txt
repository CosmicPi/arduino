Design test elements - Separate repository
Regression test - a set of features to be verified, and run each time the master is changed.
-2) Take 50 samples per channel per event.
-1) Modification to software; start up with a 1s timer instead of PPS; then transition to PPS when available.
0) GPS Reads to take place once per hour (nominal), with a parameter. Design case is for a static detector.
1) Generate events from Arduino DUE; trigger signal and analogue waveform - test pattern for pulses to be defined
to be run on two systems and give the same results.
Rate 1hz - 10Hz, Voltage waveform 0-3V, waveform length up to 10-50uS, delay of 1uS between trigger pulse and start of waveform
2) Reset of HTU21D + Accel/alt as needed
3) SPI interfacce
  write data to and (read back?) from MAX1932 - check it works via reading Vbias back in ADC.
  write a monotonic increase to SPI and read a monotonic inceasing function back on ADC.

With TWO units
1) Zero baseline; comparison of events from the same source with two units in the same place each using their own GPS.

With analogue
3) Measure power consumption for characterisation over 1 hour of nominal operation (Requires analogue!)
10) Amplifiers (both stages tested together)
  with jumper set to test mode, inject via DAC into one channel first, then both channels with second DAC
  verify output at ADC.

Testing requirements for PTS
1) Power consumption, not measured, provided it's less than 500mA
2) Serial communications over Programming port (send from Arduino to check it works)
3) I2C line 0 (Due PINS SDA/SCL)
  Write data to and read back: ACCEL/MAG (LMS303), BMP280, HTU21
4) I2C line 1 (Due Pins SDA1 SCL1)
  write data to and read back: MAX5387 variable resistor
5) SPI interfacce
  write data to and (read back?) from MAX1932 - check it works via reading Vbias back in ADC.
  write a monotonic increase to SPI and read a monotonic inceasing function back on ADC.
6) GPS UART
  write generic text string, read back text string (check what would be a good code to send!)
7) GPS PPS, when signal OK
 check it's roughly 1s between events - take 5 events, count on timer between 40M and 50M considered ok.
9) Indicator LED's, make them flash? - user feedback to host PC to say they flash!
10) Amplifiers (both stages tested together)
  with jumper set to test mode, inject via DAC into one channel first, then both channels with second DAC
  verify output at ADC.
  
  Analogue PCB dedicated test (LED not used)
  Note: VBias cannot be applied to the PCB when it is connected directly to the Arduino as it will cause an overvoltage condition in the voltage regulator on the Arduino. External, voltage controlled power supply is required for this test. 
  1) Power up 5V and check quiescent output from Ch 1 and Ch 2 amplifiers (should be circa 2.5V), if 0 board considered failed.
  2) Measure temperature and set HV PSU to appropriate value.
  3) Using analogue soft trigger (DUE ADC) set a threshold on Ch 1 and measure event rate, adjust single channel trigger value to 0.4-1Hz rate.
  4) Vary the threshold on Ch 2 until the coincidence rate is in the 0.4 - 0.6 Hz range; if this cannot be measured before timeout (100s) then increase the bias voltage by 1 bit and start again from 3. Bias voltage to have a maximum constrained value, if reached board is considered failed. 
  5) When voltage and thresholds are set, measure 100 events with 12 samples each and put these in a log file for future QA.
  6) Output the voltage and threshold values for hand-marking on to PCB before assembly.

  Analogue PCB dedicated test (LED used)
  Note: VBias cannot be applied to the PCB when it is connected directly to the Arduino as it will cause an overvoltage condition in the voltage regulator on the Arduino. External, voltage controlled power supply is required for this test. 
  1) Power up 5V and check quiescent output from Ch 1 and Ch 2 amplifiers (should be circa 2.5V), if 0 board considered failed.
  2) Measure temperature and set HV PSU to appropriate value.
  3) Set LED (BLUE or RED, BLUE is prefered) to output short pulses, 100 uS long, frequency 10Hz.
  4) Using analogue soft trigger (DUE ADC) set a threshold on Ch 1 and measure event rate, adjust single channel trigger value to 10Hz rate.
  5) Vary the threshold on Ch 2 until the coincidence rate is in the 9.5-10.5 Hz range; if this cannot be measured before timeout (100s) then increase the bias voltage by 1 bit and start again from 3. Bias voltage to have a maximum constrained value, if reached board is considered failed. 
  6) When voltage and thresholds are set, measure 100 events with 12 samples each and put these in a log file for future QA.
  7) Turn off LED, re-adjust Ch 1 threshold for a single channel event rate of 0.4 - 1 Hz using analogue trigger.
  8) Adjust Ch 2 threshold until 0.4-0.6 Hz rate acheived on coincidence. 
  9) Output the voltage and threshold values for hand-marking on to PCB before assembly.
